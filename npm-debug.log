0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/node', '/usr/bin/npm', 'publish' ]
2 info using npm@3.8.8
3 info using node@v6.0.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/usr/OtherDev/node-merkle-tree',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/usr/.npm/merkle-tree-gen/1.0.0/package.tgz not in flight; packing
9 verbose correctMkdir /home/usr/.npm correctMkdir not in flight; initializing
10 info lifecycle merkle-tree-gen@1.0.0~prepublish: merkle-tree-gen@1.0.0
11 silly lifecycle merkle-tree-gen@1.0.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/home/usr/.npm/merkle-tree-gen/1.0.0/package.tgz',
12 verbose tar pack   '/home/usr/OtherDev/node-merkle-tree' ]
13 verbose tarball /home/usr/.npm/merkle-tree-gen/1.0.0/package.tgz
14 verbose folder /home/usr/OtherDev/node-merkle-tree
15 verbose addLocalTarball adding from inside cache /home/usr/.npm/merkle-tree-gen/1.0.0/package.tgz
16 verbose correctMkdir /home/usr/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd merkle-tree-gen@1.0.0
18 verbose afterAdd /home/usr/.npm/merkle-tree-gen/1.0.0/package/package.json not in flight; writing
19 verbose correctMkdir /home/usr/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /home/usr/.npm/merkle-tree-gen/1.0.0/package/package.json written
21 silly publish { name: 'merkle-tree-gen',
21 silly publish   version: '1.0.0',
21 silly publish   description: 'Merkle Tree implementation in NodeJS',
21 silly publish   main: 'index.js',
21 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/devedge/node-merkle-tree.git' },
21 silly publish   directories: { lib: './lib' },
21 silly publish   author: { name: 'devedge', email: 'devedge@outlook.com' },
21 silly publish   license: 'MIT',
21 silly publish   bugs: { url: 'https://github.com/devedge/node-merkle-tree/issues' },
21 silly publish   homepage: 'https://github.com/devedge/node-merkle-tree#readme',
21 silly publish   dependencies:
21 silly publish    { 'chunking-streams': '0.0.8',
21 silly publish      collections: '^3.0.0',
21 silly publish      hasha: '^2.2.0' },
21 silly publish   readme: '# node-merkle-tree\n[![Licence](https://img.shields.io/github/license/mashape/apistatus.svg?style=flat-square)](https://github.com/devedge/merkle-tree-gen/blob/master/LICENSE) \n[![npm version](https://badge.fury.io/js/merkle-tree-gen.svg?style=flat-square)](https://badge.fury.io/js/merkle-tree-gen) <br>\nMerkle Tree implementation in NodeJS\n<br><br>\n\nInstall from NPM: <br>\n```\nnpm install merkle-tree-gen --save\n```\n\nThis modules generates a Merkle Tree from either [a file](#generate-from-a-file), [an array of any elements](#generate-from-an-array), or an [array of hashes](#generate-from-an-array-of-hashes). The returned value is a JavaScript object, which can be converted into JSON using `JSON.stringify()`. [Example Merkle Tree Object](#example)\n<br><br><br>\nThe `merkle-tree-gen` module can be set up and used with three simple steps: (Example for hashing a file) <br><br>\nImport the module: <br>\n```javascript\nvar merkle = require(\'merkle-tree-gen\');\n```\n\nSpecify the relevant arguments for the function: <br>\n```\nvar args = {\n    file: \'/absolute/filepath/to/file.zip\'\n}\n```\n\nGenerate the Merkle Tree: <br>\n```javascript\nmerkle.fromFile(args, function (err, tree) {\n\n    // the \'tree\' object can be used here\n});\n```\n\n<br>\nUsage information:\n\n* `fromFile()`  Passing in a file: <br>\n    The three arguments that can be set are: \n    * `file: `      - <b>required</b>, the absolute path to an existing file\n    * `hashalgo: `  - <b>optional</b>, the hash algorithm (default `sha256`)\n    * `blocksize: ` - <b>optional</b>, the blocksize (default 1 MiB `1048576 Bytes`)\n    <br><br>\n    The file (piped into a readStream) is split into chunks specified by the blocksize, and each chunk is hashed to create a leaf on the Merkle Tree. <br>\n    Specific information can be found in the [example usage](#generate-from-a-file) <br><br>\n\n* `fromArray()`  Passing in a regular array: <br>\n    The two arguments that can be set are: \n    * `array: `     - <b>required</b>, an array with a non-zero size\n    * `hashalgo`    - <b>optional</b>, the hash algorithm (default `sha256`)\n    <br><br>\n    The hash of each element in the array will become a leaf on the Merkle Tree. Before hashing, each element (if it isn\'t a string) will be converted into a string using `JSON.stringify(value)`. <br>\n    Specific information can be found in the [example usage](#generate-from-an-array) <br><br>\n\n* `fromArray()`  Passing in an array of hashes: <br>\n    The three arguments that can be set are: \n    * `array: `     - <b>required</b>, an array with a non-zero size\n    * `hashalgo: `  - <b>optional</b>, the hash algorithm (default `sha256`)\n    * `hashlist: `  - <b>required</b>, the array is a list of hashes (default `false`). This needs to be set to `true`\n    <br><br>\n    If you want to pass in hashes already generated using some other method, this function will use those hashes as the leaves in the generated Merkle Tree. <br>\n    The hashes must have been generated with the same algorithm as specified with `hashalgo`. <br>\n    Specific information can be found in the [example usage](#generate-from-an-array-of-hashes) <br>\n\n\n\n<br>\nUses the hashes provided by the NodeJS `crypto` module. Ex: `md4`, `md5`, `sha1`, `sha256`, `sha512`, `whirlpool` \n<br>\nDependencies: [`collections`](https://www.npmjs.com/package/collections), [`hasha`](https://www.npmjs.com/package/hasha), [`chunking-streams`](https://www.npmjs.com/package/chunking-streams)\n<br><br>\n`TODO:` Implement verification methods/proofs and extracting/concatenating branches into a tree. \n\n## Generate from a file\n```javascript\n// Hash a file\nvar merkle = require(\'merkle-tree-gen\');\n\n// Set up the arguments\nvar args = {\n    file: \'/absolute/filepath/to/file.zip\', // required\n    hashalgo: \'sha256\', // optional, defaults to sha256\n    blocksize: 1048576  // optional, defaults to 1 MiB (Megabyte), 1048576 Bytes\n};\n\n// Generate the tree\nmerkle.fromFile(args, function (err, tree) {\n\n    if (!err) {\n        console.log(\'Root hash: \' + tree.root);\n        console.log(\'Number of leaves: \' + tree.leaves);\n        console.log(\'Number of levels: \' + tree.levels);\n    }\n});\n```\n<br>\n```\n// Example result:\nRoot hash: 4b84a0fea1374585707c9e92eee03b989222ab3e443d6191431346b2174f8814\nNumber of leaves: 9\nNumber of levels: 5\n```\n\n<br>\n## Generate from an array\n```javascript\n// Hash an array\nvar merkle = require(\'merkle-tree-gen\');\n\n// Set up the arguments\nvar args = {\n    // The elements are converted to a string with JSON.stringify() before being hashed\n    array: [12, someObject, "string1", "string2", secondObject],    // required\n    hashalgo: \'sha256\'  // optional, defaults to sha256\n};\n\n// Generate the tree\nmerkle.fromArray(args, function (err, tree) {\n\n    if (!err) {\n        console.log(\'Root hash: \' + tree.root);\n        console.log(\'Number of leaves: \' + tree.leaves);\n        console.log(\'Number of levels: \' + tree.levels);\n    }\n});\n```\n<br>\n```\n// Example result:\nRoot hash: b425fca4eae215c50c0006d7f7dd46653500762bdeb4a06160009a1e94a1d05e\nNumber of leaves: 5\nNumber of levels: 4\n```\n\n<br>\n## Generate from an array of hashes\n```javascript\n// Hash an array of hashes\nvar merkle = require(\'merkle-tree-gen\');\n\n// Set up the arguments\nvar args = {\n    // The hashes must be of the same hash type as \'hashalgo\'\n    array: [\n        "98325468840887230d248330de2c99f76750d131aa6076dbd9e9a0ab20f09fd0",\n        "e60b311f8206962615afce5b2cfad4674bc0e49bef8043bb5f19ca746eb671eb",\n        "ff1da71d8a78d13fd280d29c3f124e6e97b78a5c8317a2a9ff3d6c5f7294143f",\n        "3b071f3d67e907ed5e2615ee904b9135e7ad4db666dad72aa63af1b04076eb9d",\n        "9c005dd47633f54816133136a980dac48968c3ddb1d5c6d4f20d76e2295034ae",\n        "c27f85771711ec1c70129714ed5c9083c96f1f12506203f46590c2146a93fae2"\n    ],  // required\n    hashalgo: \'sha256\', // optional, defaults to sha256\n    hashlist: true      // optional, but it is required to be set to \'true\' for this example to work. \n                        // It defaults to \'false\', but when it is \'true\' the array\'s elements are \n                        // treated as hashes and become the leaves of the Merkle Tree\n};\n\n// Generate the tree\nmerkle.fromArray(args, function (err, tree) {\n\n    if (!err) {\n        console.log(\'Root hash: \' + tree.root);\n        console.log(\'Number of leaves: \' + tree.leaves);\n        console.log(\'Number of levels: \' + tree.levels);\n    }\n});\n```\n<br>\n```\n// Result:\nRoot hash: a548b8eb59e1579759d65473ec470673a0b55e62925f096fdf0f7f127036f90c\nNumber of leaves: 6\nNumber of levels: 4\n```\n\n<br>\n## Example\nAn example Merkle Tree object generated from a 2.6 MiB file, using SHA-256 and hashing every 1 MiB of the file (blocksize of 1048576):\n\n```json\n{\n    "root": "3a9f60b4feb44b003ff6d1426718a7e4d81725892cea87b9938e25900530b72e",\n    "hashalgo": "sha256",\n    "leaves": 3,\n    "levels": 3,\n    "3515590e98ad159338b2d5f8d6b9a5123534a898f4e0c2d33040305c6a9654e7": {\n        "type": "leaf",\n        "level": 0,\n        "left": "data",\n        "right": "data",\n        "parent": "1340b622bcae8720ba3aa90b966511a1b675715e3de236a4f4905bb064e7a05a"\n    },\n    "eb1d2c20c49195606dd0c65a8ab5134438d253907473fd96e5bb4a343a706bda": {\n        "type": "leaf",\n        "level": 0,\n        "left": "data",\n        "right": "data",\n        "parent": "1340b622bcae8720ba3aa90b966511a1b675715e3de236a4f4905bb064e7a05a"\n    },\n    "85c3cf8fbdcf26ae2f301907d90e49c50203a782aa28cee28b341567592ca6a2": {\n        "type": "leaf",\n        "level": 0,\n        "left": "data",\n        "right": "data",\n        "parent": "44210e019bccfd1f775b8e83909423a2da293db47bc1a9e4bf826a37b5346372"\n    },\n    "1340b622bcae8720ba3aa90b966511a1b675715e3de236a4f4905bb064e7a05a": {\n        "type": "node",\n        "level": 1,\n        "left": "3515590e98ad159338b2d5f8d6b9a5123534a898f4e0c2d33040305c6a9654e7",\n        "right": "eb1d2c20c49195606dd0c65a8ab5134438d253907473fd96e5bb4a343a706bda",\n        "parent": "3a9f60b4feb44b003ff6d1426718a7e4d81725892cea87b9938e25900530b72e"\n    },\n    "44210e019bccfd1f775b8e83909423a2da293db47bc1a9e4bf826a37b5346372": {\n        "type": "node",\n        "level": 1,\n        "left": "85c3cf8fbdcf26ae2f301907d90e49c50203a782aa28cee28b341567592ca6a2",\n        "right": "85c3cf8fbdcf26ae2f301907d90e49c50203a782aa28cee28b341567592ca6a2",\n        "parent": "3a9f60b4feb44b003ff6d1426718a7e4d81725892cea87b9938e25900530b72e"\n    },\n    "3a9f60b4feb44b003ff6d1426718a7e4d81725892cea87b9938e25900530b72e": {\n        "type": "root",\n        "level": 2,\n        "left": "1340b622bcae8720ba3aa90b966511a1b675715e3de236a4f4905bb064e7a05a",\n        "right": "44210e019bccfd1f775b8e83909423a2da293db47bc1a9e4bf826a37b5346372",\n        "parent": "root"\n    }\n}\n```\n\n## Licence\n\n[MIT](https://github.com/devedge/node-merkle-tree/blob/master/LICENSE)\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: 'e303009ed7079620c885355e3b1b8afdfe6f520c',
21 silly publish   _id: 'merkle-tree-gen@1.0.0',
21 silly publish   _shasum: '89a8b774f21fc568b3a5db24ca7d51aa7070cc61',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name merkle-tree-gen
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'merkle-tree-gen',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   name: 'merkle-tree-gen',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/merkle-tree-gen
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /home/usr/.npm/merkle-tree-gen/1.0.0/package.tgz
30 verbose request uri https://registry.npmjs.org/merkle-tree-gen
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 12:21:26 AM
33 verbose request using bearer token for auth
34 verbose request id 71bfac0d01e5d1b1
35 http request PUT https://registry.npmjs.org/merkle-tree-gen
36 http 403 https://registry.npmjs.org/merkle-tree-gen
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '95',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Sat, 07 May 2016 04:21:27 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-jfk1035-JFK',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1462594886.903210,VS0,VE735',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating /home/usr/.npm/registry.npmjs.org/merkle-tree-gen on PUT
39 error publish Failed PUT 403
40 verbose stack Error: "You cannot publish over the previously published version 1.0.0." : merkle-tree-gen
40 verbose stack     at makeError (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
40 verbose stack     at Request._callback (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
40 verbose stack     at Request.self.callback (/usr/lib/node_modules/npm/node_modules/request/request.js:200:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1067:10)
40 verbose stack     at emitOne (events.js:101:20)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:988:12)
41 verbose statusCode 403
42 verbose pkgid merkle-tree-gen
43 verbose cwd /home/usr/OtherDev/node-merkle-tree
44 error Linux 4.5.1-1-ARCH
45 error argv "/usr/bin/node" "/usr/bin/npm" "publish"
46 error node v6.0.0
47 error npm  v3.8.8
48 error code E403
49 error "You cannot publish over the previously published version 1.0.0." : merkle-tree-gen
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
